{
  "react-functional-component": {
    "prefix": "rfc",
    "body": [
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    <div>",
      "      ${2:/* Your code here */}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a functional component"
  },
  "react-use-effect": {
    "prefix": "useef",
    "body": [
      "  useEffect(() => {",
      "    ${2:// Your effect code here}",
      "  }, []);"
    ],
    "description": "Create useEffect"
  }
  ,
  "react-use-callback": {
    "prefix": "usecb",
    "body": [
      "const ${1:callback} = useCallback(() => {",
      "  ${2:// Your callback code here}",
      "}, []);"
    ],
    "description": "Create useCallback"
  }
  ,
  "react-use-state": {
    "prefix": "usest",
    "body": [
      "const [${1:state}, set${2:State}] = useState(${3:initialValue});"
    ],
    "description": "Create a useState hook"
  }
  ,
  "react-custom-hook": {
    "prefix": "rhook",
    "body": [
      "const use${1:CustomHook} = (${2:params}) => {",
      "  ${3:// Hook logic here}",
      "  return ${4:null};",
      "};",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "Create a custom React hook"
  },
  "react-use-memo": {
    "prefix": "usem",
    "body": [
      "const ${1:memorizedValue} = useMemo(() => {",
      "  const value = ${2:// Compute value here}",
      "  return value;",
      "}, [${3:dependencies}]);"
    ],
    "description": "Create useMemo"
  },
  "react-use-reducer": {
    "prefix": "usered",
    "body": [
      "const ${1:reducer} = (state, action) => {",
      "  switch (action.type) {",
      "    case '${2:ACTION_TYPE}':",
      "      return {",
      "        ...state,",
      "        ${3:// update state here}",
      "      };",
      "    default:",
      "      return state;",
      "  }",
      "};",
      "",
      "const [${4:state}, ${5:dispatch}] = useReducer(${1:reducer}, ${6:initialState});"
    ],
    "description": "Create a useReducer hook with reducer function"
  }
}
{
  "react-functional-component": {
    "prefix": "rfc",
    "body": [
      "interface ${1:ComponentName}Props {",
      "  ${2:/* props here */}",
      "}",
      "const ${1:ComponentName} = ({}: ${1:ComponentName}Props) => {",
      "  return (",
      "    <div>",
      "      ${3:/* Your code here */}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a functional component"
  },
  "react-use-effect": {
    "prefix": "useef",
    "body": [
      "  useEffect(() => {",
      "    ${2:// Your effect code here}",
      "  }, []);"
    ],
    "description": "Create useEffect"
  },
  "react-use-callback": {
    "prefix": "usecb",
    "body": [
      "const ${1:callback} = useCallback(() => {",
      "  ${2:// Your callback code here}",
      "}, []);"
    ],
    "description": "Create useCallback"
  },
  "react-use-state": {
    "prefix": "usest",
    "body": [
      "const [${1:state}, set${2:State}] = useState<${4:type}>(${3:initialValue});"
    ],
    "description": "Create a useState hook"
  },
  "react-custom-hook": {
    "prefix": "rhook",
    "body": [
      "const use${1:CustomHook} = (${2:params}) => {",
      "  ${3:// Hook logic here}",
      "  return ${4:null};",
      "};",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "Create a custom React hook"
  },
  "react-use-memo": {
    "prefix": "usem",
    "body": [
      "const ${1:memorizedValue} = useMemo<${2:type}>(() => {",
      "  ${3:// Compute value here}",
      "  return ${4:value};",
      "}, [${5:dependencies}]);"
    ],
    "description": "Create useMemo"
  },
  "react-use-reducer": {
    "prefix": "usered",
    "body": [
      "type ${1:State}State = {",
      "  ${2:/* state properties */}",
      "};",
      "",
      "type ${3:Action}Action =",
      "  | { type: '${4:ACTION_TYPE}'; payload: ${5:any} }",
      "",
      "const reducer = (state: ${1:State}State, action: ${3:Action}Action): ${1:State}State => {",
      "  switch (action.type) {",
      "    case '${4:ACTION_TYPE}':",
      "      return { ...state, /* update state */ };",
      "    default:",
      "      return state;",
      "  }",
      "};",
      "",
      "const [state, dispatch] = useReducer(reducer, ${6:initialState});"
    ],
    "description": "Create a useReducer hook with types"
  }
}
